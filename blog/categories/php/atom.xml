<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | aknosis.com]]></title>
  <link href="http://aknosis.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://aknosis.com/"/>
  <updated>2012-10-02T23:16:31-07:00</updated>
  <id>http://aknosis.com/</id>
  <author>
    <name><![CDATA[Paul 'aknosis' Giberson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Twig cache file permissions]]></title>
    <link href="http://aknosis.com/2012/10/02/twig-cache-file-permissions/"/>
    <updated>2012-10-02T20:29:00-07:00</updated>
    <id>http://aknosis.com/2012/10/02/twig-cache-file-permissions</id>
    <content type="html"><![CDATA[<p>If you are having problems with the permissions of the cache files that <a href="http://twig.sensiolabs.org/">Twig</a>
compiles this may point you in the right direction.</p>

<p>To bring you up to speed, Twig will compile Twig templates into native php once
parsed, this ensures that they are rendered as fast as possible.</p>

<p>My specific use case is that some templates are compiled on the command line
as a different user than apache which compiles them from web requests. When
generating templates from various users I ran into permissions where the cli
user couldn't create cache files in folders that were previously created by
Apache. The cli user and Apache both are in the same group so I just needed to
make sure that all folders and files (for clearing the cache) are owned by the
common group, which is easier said than done.</p>

<!--more-->


<h2>Cache Files and setgid</h2>

<p>I could never get Twig to work the way I <del>needed</del> expected it to.
After much trial and error I found out that my problem lied deep inside Twig.
When Twig writes out cache files it creates two sub folders e.g. cachedir/ab/cd/abcdefg.php.
I have to ensure that these new folders and files in them get created with the common group
owning them. I accomplish this using the <a href="http://en.wikipedia.org/wiki/Setgid">setgid</a> bit on
the parent cache directory (chmod 2775 or chmod g+s). Now thinking my problems are solved I see what
the real results of my perm change are... New directories were still not being created by the
common group, everything was owned by the apache group still, and even then the directories
weren't group writable.</p>

<h2>Digging into the source</h2>

<p>The answer is always in the source right? Taking a look into the<br/>
<a href="https://github.com/fabpot/Twig/blob/master/lib/Twig/Environment.php#L1082">source</a> (extracted below)
you have to believe that the directories would be created as 0777 (globally writeable, readable and
executable) but that would be too easy. It turns out that Apache was creating directories as 0644 and
still owned by apache:apache. It got more strange when seeing that cache files created by my cli user
were indeed created as cli:common rather than cli:cli.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;&amp;lt;?php&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;protected function writeCacheFile($file, $content)</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    $dir = dirname($file);</span>
</span><span class='line'><span class="x">    if (!is_dir($dir)) {</span>
</span><span class='line'><span class="x">        if (false === @mkdir($dir, 0777, true) &amp;amp;&amp;amp; !is_dir($dir)) {</span>
</span><span class='line'><span class="x">            throw new RuntimeException(sprintf(&quot;Unable to create the cache directory (%s).&quot;, $dir));</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">    } elseif (!is_writable($dir)) {</span>
</span><span class='line'><span class="x">        throw new RuntimeException(sprintf(&quot;Unable to write in the cache directory (%s).&quot;, $dir));</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'>
</span><span class='line'><span class="x">    $tmpFile = tempnam(dirname($file), basename($file));</span>
</span><span class='line'><span class="x">    if (false !== @file_put_contents($tmpFile, $content)) {</span>
</span><span class='line'><span class="x">        // rename does not work on Win32 before 5.2.6</span>
</span><span class='line'><span class="x">        if (@rename($tmpFile, $file) || (@copy($tmpFile, $file) &amp;amp;&amp;amp; unlink($tmpFile))) {</span>
</span><span class='line'><span class="x">            @chmod($file, 0644);</span>
</span><span class='line'>
</span><span class='line'><span class="x">            return;</span>
</span><span class='line'><span class="x">        }</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'>
</span><span class='line'><span class="x">    throw new Twig_Error_Runtime(sprintf(&#39;Failed to write cache file &quot;%s&quot;.&#39;, $file));</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;?&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>umask</h2>

<p>After a fair amount of googling it turns out that Apache runs with a <a href="http://en.wikipedia.org/wiki/Umask">umask</a>
of 0022 preventing it from creating files and folders that are writable by a group other than its own. The
cli user has a umask of 0002, allowing it to create a file that is not owned by itself. So even though
Twig tells php to create the directory with the 0777 permission it was effectively creating it as 0644 when
running from Apache. If umask is still boggling you, read this <a href="http://www.linuxnix.com/2011/12/umask-define-linuxunix.html">good explanation of umask</a>.</p>

<h2>Lord love some object oriented programming</h2>

<p>After hours of wrapping my brain around the funk that was the umask, setgid, and permissions in general, I came up
with this easy patch that allows me to have much greater control of the cache file creation.</p>

<p>The code basically changes the umask to that of the cli user (0002) and proceeds to create the directory before
Twig tries to do it. Then I call the function I overrode (the one in the above code block ) that creates my cached
template file. I then take that cache file and set it to 775 so that it is readable, writable, and executable by the
user and group shared amongst apache and the cli user.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">class Aknosis_Twig_Environment extends Twig_Environment {&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;/**</span>
</span><span class='line'><span class="x"> * This exists so template cache files use the same</span>
</span><span class='line'><span class="x"> * group between apache and cli</span>
</span><span class='line'><span class="x"> */</span>
</span><span class='line'><span class="x">protected function writeCacheFile($file, $content){</span>
</span><span class='line'><span class="x">    if (!is_dir(dirname($file))) {</span>
</span><span class='line'><span class="x">        $old = umask(0002);</span>
</span><span class='line'><span class="x">        mkdir(dirname($file),0777,true);</span>
</span><span class='line'><span class="x">        umask($old);</span>
</span><span class='line'><span class="x">    }</span>
</span><span class='line'><span class="x">    parent::writeCacheFile($file, $content);</span>
</span><span class='line'><span class="x">    chmod($file,0775);</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span><span class='line'><span class="x">?&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>So now in my code I am calling  <code>new Aknosis_Twig_Environment($etc);</code> instead of <code>new Twig_Environment($etc);</code></p>

<h3>Side Note</h3>

<p>In the time it has taken me to write this post, there was an
<a href="https://github.com/fabpot/Twig/issues/749">issue</a> that was
solved in regards to the umask. This is a similar issue to what I am
trying to solve here, but not similar enough to solve my problem.
Basically this user was saying that creating the file blindly as 0644
is incorrect and that we should apply the umask for the cache
file. The <a href="https://github.com/fabpot/Twig/commit/d4511d02b45725a56c8cc49127244bca640c9d13">fix</a>
however, does not solve my problem, it only applies the umask for the cache file writing,
not the folder. As it stands now I still have this manual override in place.</p>

<p>I have to assume that my situation isn't 100% unique, if you need to allow access to compiled template folder by more than one single user the code above should work, or get you pointed in the correct direction.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Tip: rawurlencode in Twig]]></title>
    <link href="http://aknosis.com/2012/04/10/quick-tip-rawurlencode-in-twig/"/>
    <updated>2012-04-10T06:04:00-07:00</updated>
    <id>http://aknosis.com/2012/04/10/quick-tip-rawurlencode-in-twig</id>
    <content type="html"><![CDATA[<p>I've been working on modifying listserv digest emails at work and porting them to Twig templates. The fun part was trying to create mailto: links that mimicked hitting reply (auto populating the subject with RE: [post title]).</p>

<p>The problem with just jamming the title in to the ?subject= param is all sorts of fun like spacing and special characters. Turns out that you can use a Twig filter to urlencode a variable: <a href="http://twig.sensiolabs.org/doc/filters/url_encode.html">Twig - urlencode filter</a></p>

<p>Under the hood Twig's urlencode filter uses php's <a href="http://us.php.net/manual/en/function.urlencode.php">urlencode</a>. If you use the urlencode filter you may notice one slight issue, spaces are converted to + instead of %20. According php.net the solution here is to use rawurlencode instead of urlenccode. Well how do you go about calling the rawurlencode filter if it doesn't exist?</p>

<p>RTFS! I couldn't seem to find out why rawurlencode wasn't an available filter and really didn't want to roll my own, it turns out if you <a href="https://github.com/fabpot/Twig/blob/master/lib/Twig/Extension/Core.php#L475"><em>read the source</em></a> you fill find an nice undocumented feature. Instead of creating a new filter for rawurlencode all you need to do is pass true to the urlencode filter!</p>

<p>Example:
<div><script src='https://gist.github.com/2347191.js?file='></script>
<noscript><pre><code>{# varaible is 'Hello There' #}

{{ variable|url_encode() }} {# Hello+There #}

{# If you want to use rawurlencode what do you do? #}

{{ variable|url_encode(true) }} {# Hello%20There #}

</code></pre></noscript></div>
</p>

<p>Next step is to make a pull request and update the docs to be more verbose!</p>

<p>Enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quicktip: Read from stdin in PHP]]></title>
    <link href="http://aknosis.com/2012/01/18/quicktip-read-from-stdin-in-php/"/>
    <updated>2012-01-18T17:06:36-07:00</updated>
    <id>http://aknosis.com/2012/01/18/quicktip-read-from-stdin-in-php</id>
    <content type="html"><![CDATA[<p><div><script src='https://gist.github.com/1636629.js?file='></script>
<noscript><pre><code>&lt;?php
/**
 * Usage:
 * $answer = prompt(&quot;What is your quest?&quot;);
 * echo &quot;Answer: $answer&quot;;
 * 
 * Outputs:
 * What is your quest?
 * I seek the holy grail!
 * Answer: I seek the holy grail!
 */
function prompt($msg){
	echo &quot;$msg\n&quot;;
	return trim(fgets(STDIN));
}</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php: (strpos) Search for text in a string]]></title>
    <link href="http://aknosis.com/2009/02/28/php-strpos-search-for-text-in-a-string/"/>
    <updated>2009-02-28T02:08:20-07:00</updated>
    <id>http://aknosis.com/2009/02/28/php-strpos-search-for-text-in-a-string</id>
    <content type="html"><![CDATA[<p>If you want to search for text inside a string but don't need fancyness of regex, here lies strpos.</p>

<p>I see a lot of posts online about people confused how strpos works and how to use it for searching for text in a string properly. First thing to note is that strpos() returns the index of the location of the string (not true if the string exists in part of the testing string).  So:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">$string = &#39;thedog&#39;;</span>
</span><span class='line'><span class="x">var_dump(strpos($string,&#39;dog&#39;));</span>
</span><span class='line'><span class="x">Output: int(3)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>How does this benefit you if you want to make sure that $string doesn't contain dog:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">$string = &#39;thecat&#39;;</span>
</span><span class='line'><span class="x">var_dump(strpos($string,&#39;dog&#39;));</span>
</span><span class='line'><span class="x">Output: bool(false)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>As you can see the result was false, but sticking that strpos straight inside your if statement is bad and erroneous code... Here's why:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">$string = &#39;thecat&#39;;</span>
</span><span class='line'><span class="x">if(strpos($string,&#39;the&#39;)){&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;echo &#39;The is in the string&#39;;</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}else{&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;echo &#39;The is not in the string&#39;;</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span><span class='line'><span class="x">Output: The is not in the string</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
What?? Lets take a closer look:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">$string = &#39;thecat&#39;;</span>
</span><span class='line'><span class="x">var_dump(strpos($string,&#39;the&#39;));</span>
</span><span class='line'><span class="x">Output: int(0)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
So you see, the reason the if statement failed is because the if statement fails on a value of 0.</p>

<p>The proper way to test with strpos is as follows:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">&amp;lt;?php</span>
</span><span class='line'><span class="x">$string = &#39;themonkey&#39;;</span>
</span><span class='line'><span class="x">if(strpos($string,&#39;monkey&#39;) !== false){&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;pre&gt;&lt;code&gt;echo &#39;There is a monkey in my string&#39;;</span>
</span><span class='line'><span class="x">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;p&gt;}</span>
</span><span class='line'><span class="x">Output: There is a monkey in my string</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
strpos() will return false if monkey is not in $string so the sure fire way to test to make sure it isn't in there is to say that the return value is explictly not false.<em> !== confuse you? This tests for an actual boolean value of false. Other values make cause an if statement to fail (such as 0 mentioned above)</em></p>

<p>(Read more about type comparison here. <a href="http://us2.php.net/manual/en/types.comparisons.php" target="_blank">http://us2.php.net/manual/en/types.comparisons.php</a>)</p>

<p>If data types are making you say huh?? See here:  <a href="http://us3.php.net/manual/en/language.types.php" target="_blank">http://us3.php.net/manual/en/language.types.php</a>, I will post later briefly about php and data types,  if you have used Java than you live and die by data types,  but php has a very simple concept when it comes to data types which makes coding in general easy but relying on and full understanding your own code sometimes difficult.</p>

<p>-Ak</p>
]]></content>
  </entry>
  
</feed>
